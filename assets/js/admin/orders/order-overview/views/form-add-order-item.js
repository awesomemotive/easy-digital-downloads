/* global wp */

/**
 * Internal dependencies
 */
import {
	Dialog,
} from './';
import {
	OrderItem,
} from './../models';
import { getChosenVars } from 'utils/chosen.js';
import { NumberFormat } from '@easy-digital-downloads/currency';

const number = new NumberFormat();

/**
 * "Add Item" view
 *
 * @since 3.0
 *
 * @class FormAddOrderItem
 * @augments wp.Backbone.View
 */
export const FormAddOrderItem = Dialog.extend( /** Lends FormAddItem.prototype */ {
	/**
	 * @since 3.0
	 */
	el: '#edd-admin-order-add-item-dialog',

	/**
	 * @since 3.0
	 */
	template: wp.template( 'edd-admin-order-form-add-order-item' ),

	/**
	 * @since 3.0
	 */
	events: {
		'submit form': 'onAdd',

		'change #download': 'onChangeDownload',
		'change #quantity': 'onChangeQuantity',
		'change #amount': 'onChangeAmount',
		'change #tax': 'onChangeTax',
		'change #subtotal': 'onChangeSubtotal',
		'change #auto-calculate' : 'onAutoCalculateToggle',
	},

	/**
	 * "Add Item" view.
	 *
	 * @since 3.0
	 *
	 * @constructs FormAddOrderItem
	 * @augments wp.Backbone.View
	 */
	initialize() {
		// Assign collection from State.
		this.collection = this.options.state.get( 'items' );

		Dialog.prototype.initialize.apply( this, arguments );

		// Create a fresh OrderItem to be added.
		// Defines additional attributes that the view can modify.
		this.item = new OrderItem( {
			amountManual: 0,
			taxManual: 0,
			subtotalManual: 0,
		} );

		// Rerender on Download or Autocalculate changes.
		this.listenTo( this.item, 'change:isAdjustingManually', this.render );
		this.listenTo( this.item, 'change:download', this.render );

		// Rerender when Overview tax configuration has changed.
		this.listenTo( this.options.state, 'change:hasTax', this.render );
	},

	/**
	 * Prepares data to be used in `render` method.
	 *
	 * @since 3.0
	 *
	 * @see wp.Backbone.View
	 * @link https://github.com/WordPress/WordPress/blob/master/wp-includes/js/wp-backbone.js
	 *
	 * @return {Object} The data for this view.
	 */
	prepare() {
		const {
			item,
			options,
		} = this;

		const {
			state,
		} = options;

		return {
			...item.toJSON(),

			state: {
				...state.toJSON(),
			},

			amountFormatted: number.format( item.get( 'amount' ) * item.get( 'quantity' ) ),
			taxFormatted: number.format( item.get( 'tax' ) * item.get( 'quantity' ) ),
			subtotalFormatted: number.format( item.get( 'subtotal' ) * item.get( 'quantity' ) ),
		};
	},

	/**
	 * Renders the view.
	 *
	 * @since 3.0
	 *
	 * @return {FormAddOrderItem} Current view.
	 */
	render() {
		wp.Backbone.View.prototype.render.apply( this );

		// Reinialize Chosen.js
		this.$el.find( '.edd-select-chosen' ).each( function() {
			$( this ).chosen( {
				...getChosenVars( $( this ) ),
				width: '100%',
			} );
		} );

		return this;
	},

	/**
	 * Updates the OrderItem when the Download changes.
	 *
	 * @since 3.0
	 *
	 * @param {Objec} e Change event for Download selector.
	 */
	onChangeDownload( e ) {
		const {
			target: {
				options,
				selectedIndex,
			},
		} = e;

		const {
			state,
		} = this.options;

		// Find the selected Download.
		const selected = options[ selectedIndex ];

		// Set the `eddUid` -- a combination of ID and Price ID,
		// generated by the server when searching for a Download.
		const eddUid = selected.value;

		// Set ID and Price ID.
		let id = eddUid;
		let priceId = 0;

		const parts = id.split( '_' );

		id = parseInt( parts[0] );

		if ( parts[1] ) {
			priceId = parseInt( parts[1] );
		}

		// Find name.
		const name = selected.text;

		// Request amounts from the server.
		const quantity = this.item.get( 'quantity' );
		const country = false !== state.get( 'hasTax' )
			? state.get( 'hasTax' ).country
			: '';
		const region = false !== state.get( 'hasTax' )
			? state.get( 'hasTax' ).region
			: '';
		
		wp.ajax.send(
			'edd-admin-order-get-item-amounts', 
			{
				data: {
					id,
					priceId,
					quantity,
					country,
					region,
				},
				/**
				 * Updates the OrderItem's attributes on successful retrieval.
				 *
				 * @since 3.0
				 *
				 * @param {Object} response AJAX response.
				 */
				success: ( response ) => {
					const {
						amount,
						subtotal,
						tax,
					} = response;

					this.item.set( {
						eddUid,

						id,
						priceId,
						name,
						amount,
						tax,
						subtotal,

						amountManual: number.format( amount ),
						taxManual: number.format( tax ),
						subtotalManual: number.format( subtotal ),
					} );

					this.item.trigger( 'change:download' );
				},
			},
		);
	},

	/**
	 * Updates the OrderItem's quantity on change.
	 *
	 * @since 3.0
	 * @todo Validate.
	 *
	 * @param {Object} e Change event.
	 */
	onChangeQuantity( e ) {
		this.item.set( 'quantity', parseInt( e.target.value ) );
	},

	/**
	 * Updates the OrderItem's manually managed amount on change.
	 *
	 * @since 3.0
	 *
	 * @param {Object} e Change event.
	 */
	onChangeAmount( e ) {
		this.item.set( 'amountManual', e.target.value );
	},

	/**
	 * Updates the OrderItem's manually managed tax on change.
	 *
	 * @since 3.0
	 *
	 * @param {Object} e Change event.
	 */
	onChangeTax( e ) {
		this.item.set( 'taxManual', e.target.value );
	},

	/**
	 * Updates the OrderItem's manually managed subtotal on change.
	 *
	 * @since 3.0
	 *
	 * @param {Object} e Change event.
	 */
	onChangeSubtotal( e ) {
		this.item.set( 'subtotalManual', e.target.value );
	},

	/**
	 * Toggles manual amount adjustments.
	 *
	 * @since 3.0
	 *
	 * @param {Object} e Change event.
	 */
	onAutoCalculateToggle( e ) {
		e.preventDefault();

		this.item.set( {
			isAdjustingManually: ! e.target.checked,
		} );
	},

	/**
	 * Adds an OrderItem to the OrderItems collection.
	 *
	 * @since 3.0
	 *
	 * @param {Object} e Submit event.
	 */
	onAdd( e ) {
		e.preventDefault();

		const {
			item,
		} = this;

		// Use manual amounts if adjusting manually.
		if ( true === item.get( 'isAdjustingManually' ) ) {
			item.set( {
				amount: number.unformat( item.get( 'amountManual' ) ),
				tax: number.unformat( item.get( 'taxManual' ) ),
				subtotal: number.unformat( item.get( 'subtotalManual' ) ),
			} );

		// Duplicate base amounts by the quantity set.
		} else {
			const quantity = item.get( 'quantity' );

			item.set( {
				tax: item.get( 'tax' ) * quantity,
				subtotal: item.get( 'subtotal' ) * quantity,
			} );
		}

		// Add OrderItem to OrderItems.
		this.collection.add( item );
	},
} );
