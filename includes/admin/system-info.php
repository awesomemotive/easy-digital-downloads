<?php
/**
 * System Info
 *
 * These are functions are used for exporting data from Easy Digital Downloads.
 *
 * @package     EDD
 * @subpackage  Admin/System
 * @copyright   Copyright (c) 2013, Pippin Williamson
 * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License
*/

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit;

/**
 * System info
 *
 * Shows the system info panel which contains version data and debug info.
 * The data for the system info is generated by the Browser class.
 *
 * @since 1.4
 * @global $wpdb
 * @global object $wpdb Used to query the database using the WordPress
 *   Database API
 * @global $edd_options Array of all the EDD Options
 * @author Chris Christoff
 * @return void
 */
function edd_system_info() {
	global $wpdb, $edd_options;

	if ( ! class_exists( 'Browser' ) )
		require_once EDD_PLUGIN_DIR . 'includes/libraries/browser.php';

	$browser = new Browser();
	if ( get_bloginfo( 'version' ) < '3.4' ) {
		$theme_data = get_theme_data( get_stylesheet_directory() . '/style.css' );
		$theme      = $theme_data['Name'] . ' ' . $theme_data['Version'];
	} else {
		$theme_data = wp_get_theme();
		$theme      = $theme_data->Name . ' ' . $theme_data->Version;
	}

	$return  = '### Begin System Info ###' . "\n\n";
	$return .= '## Please include this information when posting support requests ##' . "\n\n";

	do_action( 'edd_system_info_before' );

	// Site basics
	$return .= '-- Site Info' . "\n\n";

	$return .= 'Site URL:                 ' . site_url() . "\n";
	$return .= 'Home URL:                 ' . home_url() . "\n";
	$return .= 'Multisite:                ' . ( is_multisite() ? 'Yes' : 'No' ) . "\n";

	if( has_filter( 'edd_after_site_info' ) )
		$return .= apply_filters( 'edd_after_site_info', $return );

	// Browser info, handled by the Browser class
	$return .= "\n" . '-- User Browser' . "\n\n";

	$return .= $browser;

	if( has_filter( 'edd_after_user_browser' ) )
		$return .= apply_filters( 'edd_after_user_browser', $return );

	// WordPress configuration
	$return .= "\n" . '-- WordPress Configuration' . "\n\n";

	$return .= 'Version:                  ' . get_bloginfo( 'version' ) . "\n";
	$return .= 'Permalink Structure:      ' . ( get_option( 'permalink_structure' ) ? get_option( 'permalink_structure' ) : 'Default' ) . "\n";
	$return .= 'Active Theme:             ' . $theme . "\n";
	$return .= 'Show On Front:            ' . get_option( 'show_on_front' ) . "\n";

	// Only show page specs if frontpage is set to 'page'
	if( get_option( 'show_on_front' ) == 'page' ) {
		$front_page_id = get_option( 'page_on_front' );
		$blog_page_id = get_option( 'page_for_posts' );

		$return .= 'Page On Front:            ' . ( $front_page_id != 0 ? get_the_title( $front_page_id ) . ' (#' . $front_page_id . ')' : 'Unset' ) . "\n";
		$return .= 'Page For Posts:           ' . ( $blog_page_id != 0 ? get_the_title( $blog_page_id ) . ' (#' . $blog_page_id . ')' : 'Unset' ) . "\n";
	}

	// Make sure wp_remote_post() is working
	$request['cmd'] = '_notify-validate';

	$params = array(
		'sslverify'     => false,
		'timeout'       => 60,
		'user-agent'	=> 'EDD/' . EDD_VERSION,
		'body'          => $request
	);

	$response = wp_remote_post( 'https://www.paypal.com/cgi-bin/webscr', $params );

	if( !is_wp_error( $response ) && $response['response']['code'] >= 200 && $response['response']['code'] < 300 ) {
		$WP_REMOTE_POST = 'wp_remote_post() works';
	} else {
		$WP_REMOTE_POST = 'wp_remote_post() does not work';
	}

	$return .= 'Remote Post:              ' . $WP_REMOTE_POST . "\n";
	$return .= 'Table Prefix:             ' . 'Length: ' . strlen( $wpdb->prefix ) . '   Status: ' . ( strlen( $wpdb->prefix ) > 16 ? 'ERROR: Too long' : 'Acceptable' ) . "\n";
	$return .= 'WP_DEBUG:                 ' . ( defined( 'WP_DEBUG' ) ? WP_DEBUG ? 'Enabled' : 'Disabled' : 'Not set' ) . "\n";
	$return .= 'Memory Limit:             ' . WP_MEMORY_LIMIT . "\n";
	$return .= 'Registered Post Stati:    ' . implode( ', ', get_post_stati() ) . "\n";

	if( has_filter( 'edd_after_wordpress_config' ) )
		$return .= apply_filters( 'edd_after_wordpress_config', $return );

	// EDD Config
	$return .= "\n" . '-- EDD Configuration' . "\n\n";

	$return .= 'EDD Version:              ' . EDD_VERSION . "\n";
	$return .= 'Upgraded From:            ' . get_option( 'edd_version_upgraded_from', 'None' ) . "\n\n";

	$return .= 'Test Mode Enabled:        ' . ( edd_is_test_mode() ? 'Yes' : 'No' ) . "\n";
	$return .= 'Ajax Enabled:             ' . ( edd_is_ajax_enabled() ? 'Yes' : 'No' ) . "\n";
	$return .= 'Guest Checkout Enabled:   ' . ( edd_no_guest_checkout() ? 'No' : 'Yes' ) . "\n";
	$return .= 'Symlinks Enabled:         ' . ( apply_filters( 'edd_symlink_file_downloads', isset( $edd_options['symlink_file_downloads'] ) ) && function_exists( 'symlink' ) ? 'Yes' : 'No' ) . "\n\n";

	$return .= 'Checkout is:              ' . ( ! empty( $edd_options['purchase_page'] ) ? 'Valid' : 'Invalid' ) . "\n";
	$return .= 'Checkout Page:            ' . ( ! empty( $edd_options['purchase_page'] ) ? get_permalink( $edd_options['purchase_page'] ) : '' ) . "\n";
	$return .= 'Success Page:             ' . ( ! empty( $edd_options['success_page'] ) ? get_permalink( $edd_options['success_page'] ) : '' ) . "\n";
	$return .= 'Failure Page:             ' . ( ! empty( $edd_options['failure_page'] ) ? get_permalink( $edd_options['failure_page'] ) : '' ) . "\n";
	$return .= 'Downloads slug:           ' . ( defined( 'EDD_SLUG' ) ? '/' . EDD_SLUG : '/downloads' ) . "\n\n";

	$return .= 'Taxes Enabled:            ' . ( edd_use_taxes() ? 'Yes' : 'No' ) . "\n";
	$return .= 'Taxes After Discounts:    ' . ( edd_taxes_after_discounts() ? 'Yes' : 'No' ) . "\n";
	$return .= 'Tax Rate:                 ' . edd_get_tax_rate() * 100 . '%' . "\n";

	$rates = edd_get_tax_rates();
	if( ! empty( $rates ) ) {
		$return .= 'Country / State Rates:    ' . "\n";

		foreach( $rates as $rate ) {
			$return .= '                          Country: ' . $rate['country'] . ', State: ' . $rate['state'] . ', Rate: ' . $rate['rate'] . "\n";
		}
	}

	if( has_filter( 'edd_after_edd_config' ) )
		$return .= apply_filters( 'edd_after_edd_config', $return );

	// EDD Template Overrides
	$dir = get_stylesheet_directory() . '/edd_templates/';
	if( is_dir( $dir ) && ( count( glob( "$dir/*" ) ) !== 0 ) ) {
		$return .= "\n" . '-- EDD Template Overrides' . "\n\n";

		foreach( glob( "$dir/*" ) as $file ) {
			$return .= 'Filename:                 ' . basename( $file ) . "\n";
		}
	}

	if( has_filter( 'edd_after_edd_templates' ) )
		$return .= apply_filters( 'edd_after_edd_templates', $return );

	// WordPress active plugins
	$return .= "\n" . '-- WordPress Active Plugins' . "\n\n";

	$plugins = get_plugins();
	$active_plugins = get_option( 'active_plugins', array() );

	foreach( $plugins as $plugin_path => $plugin ) {
		if( !in_array( $plugin_path, $active_plugins ) )
			continue;

		$return .= $plugin['Name'] . ': ' . $plugin['Version'] . "\n";
	}

	// WordPress inactive plugins
	$return .= "\n" . '-- WordPress Inactive Plugins' . "\n\n";

	foreach( $plugins as $plugin_path => $plugin ) {
		if( in_array( $plugin_path, $active_plugins ) )
			continue;

		$return .= $plugin['Name'] . ': ' . $plugin['Version'] . "\n";
	}

	if( is_multisite() ) {
		// WordPress Multisite active plugins
		$return .= "\n" . '-- Network Active Plugins' . "\n\n";

		$plugins = wp_get_active_network_plugins();
		$active_plugins = get_site_option( 'active_sitewide_plugins', array() );

		foreach( $plugins as $plugin_path ) {
			$plugin_base = plugin_basename( $plugin_path );

			if( !array_key_exists( $plugin_base, $active_plugins ) )
				continue;

			$return .= $plugin['Name'] . ': ' . $plugin['Version'] . "\n";
		}

		// WordPress Multisite inactive plugins
		$return .= "\n" . '-- Network Inactive Plugins' . "\n\n";

		foreach( $plugins as $plugin_path ) {
			$plugin_base = plugin_basename( $plugin_path );

			if( array_key_exists( $plugin_base, $active_plugins ) )
				continue;

			$return .= $plugin['Name'] . ': ' . $plugin['Version'] . "\n";
		}
	}

	if( has_filter( 'edd_after_wordpress_plugins' ) )
		$return .= apply_filters( 'edd_after_wordpress_plugins', $return );

	// Server configuration
	$return .= "\n" . '-- Webserver Configuration' . "\n\n";

	$return .= 'PHP Version:              ' . PHP_VERSION . "\n";
	$return .= 'MySQL Version:            ' . mysql_get_server_info() . "\n";
	$return .= 'Webserver Info:           ' . $_SERVER['SERVER_SOFTWARE'] . "\n";

	if( has_filter( 'edd_after_webserver_config' ) )
		$return .= apply_filters( 'edd_after_webserver_config', $return );

	// PHP configs
	$return .= "\n" . '-- PHP Configuration' . "\n\n";

	$return .= 'Safe Mode:                ' . ( ini_get( 'safe_mode' ) ? 'Yes' : 'No' ) . "\n";
	$return .= 'Memory Limit:             ' . ini_get( 'memory_limit' ) . "\n";
	$return .= 'Upload Max Size:          ' . ini_get( 'upload_max_filesize' ) . "\n";
	$return .= 'Post Max Size:            ' . ini_get( 'post_max_size' ) . "\n";
	$return .= 'Upload Max Filesize:      ' . ini_get( 'upload_max_filesize' ) . "\n";
	$return .= 'Time Limit:               ' . ini_get( 'max_execution_time' ) . "\n";
	$return .= 'Max Input Vars:           ' . ini_get( 'max_input_vars' ) . "\n";
	$return .= 'Display Errors:           ' . ( ini_get( 'display_errors' ) ? 'On (' . ini_get( 'display_errors' ) . ')' : 'N/A' ) . "\n";

	if( has_filter( 'edd_after_php_config' ) )
		$return .= apply_filters( 'edd_after_php_config', $return );

	// PHP extensions
	$return .= "\n" . '-- PHP Extensions' . "\n\n";

	$return .= 'cURL:                     ' . ( function_exists( 'curl_init' ) ? 'Supported' : 'Not Supported' ) . "\n";
	$return .= 'fsockopen:                ' . ( function_exists( 'fsockopen' ) ? 'Supported' : 'Not Supported' ) . "\n";
	$return .= 'SOAP Client:              ' . ( class_exists( 'SoapClient' ) ? 'Installed' : 'Not Installed' ) . "\n";
	$return .= 'Suhosin:                  ' . ( extension_loaded( 'suhosin' ) ? 'Installed' : 'Not Installed' ) . "\n";

	if( has_filter( 'edd_after_php_ext' ) )
		$return .= apply_filters( 'edd_after_php_ext', $return );

	// Session information
	$return .= "\n" . '-- Session Configuration' . "\n\n";

	$return .= 'Session:                  ' . ( isset( $_SESSION ) ? 'Enabled' : 'Disabled' ) . "\n";

	if( isset( $_SESSION ) ) {
		$return .= 'Session Name:             ' . esc_html( ini_get( 'session.name' ) ) . "\n";
		$return .= 'Cookie Path:              ' . esc_html( ini_get( 'session.cookie_path' ) ) . "\n";
		$return .= 'Save Path:                ' . esc_html( ini_get( 'session.save_path' ) ) . "\n";
		$return .= 'Use Cookies:              ' . ( ini_get( 'session.use_cookies' ) ? 'On' : 'Off' ) . "\n";
		$return .= 'Use Only Cookies:         ' . ( ini_get( 'session.use_only_cookies' ) ? 'On' : 'Off' ) . "\n";
	}

	if( has_filter( 'edd_after_session_info' ) )
		$return .= apply_filters( 'edd_after_session_info', $return );

	do_action( 'edd_system_info_after' );

	$return .= "\n" . '### End System Info ###';

?>
	<div class="wrap">
		<h2><?php _e( 'System Information', 'edd' ) ?></h2><br/>
		<form action="<?php echo esc_url( admin_url( 'edit.php?post_type=download&page=edd-system-info' ) ); ?>" method="post" dir="ltr">
			<textarea readonly="readonly" onclick="this.focus();this.select()" id="system-info-textarea" name="edd-sysinfo" title="<?php _e( 'To copy the system info, click below then press Ctrl + C (PC) or Cmd + C (Mac).', 'edd' ); ?>"><?php echo $return; ?></textarea>
			<p class="submit">
				<input type="hidden" name="edd-action" value="download_sysinfo" />
				<?php submit_button( __( 'Download System Info File', 'edd' ), 'primary', 'edd-download-sysinfo', false ); ?>
			</p>
		</form>
		</div>
	</div>
<?php
}

/**
 * Generates the System Info Download File
 *
 * @since 1.4
 * @return void
 */
function edd_generate_sysinfo_download() {
	nocache_headers();

	header( "Content-type: text/plain" );
	header( 'Content-Disposition: attachment; filename="edd-system-info.txt"' );

	echo wp_strip_all_tags( $_POST['edd-sysinfo'] );
	edd_die();
}
add_action( 'edd_download_sysinfo', 'edd_generate_sysinfo_download' );
